// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  carts         Cart[]
  orders        Order[]
}

// Product model
model Product {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Float
  image       String
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  featured    Boolean   @default(false)
  rating      Float     @default(0)
  stock       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

// Category model
model Category {
  id          String    @id @default(cuid())
  name        String
  products    Product[]  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Cart model
model Cart {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       CartItem[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// CartItem model
model CartItem {
  id          String    @id @default(cuid())
  cartId      String
  cart        Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Order model
model Order {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items         OrderItem[]
  totalAmount   Float
  status        OrderStatus @default(PENDING)
  shippingAddress String
  paymentMethod  PaymentMethod
  paymentStatus  PaymentStatus @default(PENDING)
  invoice       Invoice?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// OrderItem model
model OrderItem {
  id          String    @id @default(cuid())
  orderId     String
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity    Int
  price       Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Invoice model
model Invoice {
  id          String    @id @default(cuid())
  orderId     String    @unique
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  invoiceNumber String   @unique
  issuedDate   DateTime  @default(now())
  dueDate      DateTime
  paidDate     DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

// Enum for user roles
enum Role {
  USER
  ADMIN
}

// Enum for order status
enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

// Enum for payment method
enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  PAYPAL
  CASH_ON_DELIVERY
}

// Enum for payment status
enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
